
lcdBuzzerWMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000005d8  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a08  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e41  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6e  00000000  00000000  00002ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00003a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e9  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d20  00000000  00000000  00004301  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00005021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 33       	cpi	r26, 0x32	; 50
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ca d1       	rcall	.+916    	; 0x4b4 <main>
 120:	59 c2       	rjmp	.+1202   	; 0x5d4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_port_config>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	87 6f       	ori	r24, 0xF7	; 247
 128:	87 b9       	out	0x07, r24	; 7
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	88 70       	andi	r24, 0x08	; 8
 12e:	88 b9       	out	0x08, r24	; 8
 130:	08 95       	ret

00000132 <lcd_set_4bit>:
 132:	86 e6       	ldi	r24, 0x66	; 102
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_set_4bit+0x4>
 13a:	00 00       	nop
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	88 b9       	out	0x08, r24	; 8
 142:	88 b1       	in	r24, 0x08	; 8
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	88 b9       	out	0x08, r24	; 8
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	88 b9       	out	0x08, r24	; 8
 14c:	98 b1       	in	r25, 0x08	; 8
 14e:	94 60       	ori	r25, 0x04	; 4
 150:	98 b9       	out	0x08, r25	; 8
 152:	ef ef       	ldi	r30, 0xFF	; 255
 154:	f7 e4       	ldi	r31, 0x47	; 71
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_set_4bit+0x24>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_set_4bit+0x2a>
 15c:	00 00       	nop
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	9b 7f       	andi	r25, 0xFB	; 251
 162:	98 b9       	out	0x08, r25	; 8
 164:	e6 e6       	ldi	r30, 0x66	; 102
 166:	fe e0       	ldi	r31, 0x0E	; 14
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_set_4bit+0x36>
 16c:	00 00       	nop
 16e:	98 b1       	in	r25, 0x08	; 8
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	98 b9       	out	0x08, r25	; 8
 174:	98 b1       	in	r25, 0x08	; 8
 176:	9d 7f       	andi	r25, 0xFD	; 253
 178:	98 b9       	out	0x08, r25	; 8
 17a:	88 b9       	out	0x08, r24	; 8
 17c:	98 b1       	in	r25, 0x08	; 8
 17e:	94 60       	ori	r25, 0x04	; 4
 180:	98 b9       	out	0x08, r25	; 8
 182:	ef ef       	ldi	r30, 0xFF	; 255
 184:	f7 e4       	ldi	r31, 0x47	; 71
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x54>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_set_4bit+0x5a>
 18c:	00 00       	nop
 18e:	98 b1       	in	r25, 0x08	; 8
 190:	9b 7f       	andi	r25, 0xFB	; 251
 192:	98 b9       	out	0x08, r25	; 8
 194:	e6 e6       	ldi	r30, 0x66	; 102
 196:	fe e0       	ldi	r31, 0x0E	; 14
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_set_4bit+0x66>
 19c:	00 00       	nop
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	9e 7f       	andi	r25, 0xFE	; 254
 1a2:	98 b9       	out	0x08, r25	; 8
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	9d 7f       	andi	r25, 0xFD	; 253
 1a8:	98 b9       	out	0x08, r25	; 8
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	97 e4       	ldi	r25, 0x47	; 71
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_set_4bit+0x84>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_set_4bit+0x8a>
 1bc:	00 00       	nop
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	e6 e6       	ldi	r30, 0x66	; 102
 1c6:	fe e0       	ldi	r31, 0x0E	; 14
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_set_4bit+0x96>
 1cc:	00 00       	nop
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	88 b9       	out	0x08, r24	; 8
 1da:	80 e2       	ldi	r24, 0x20	; 32
 1dc:	88 b9       	out	0x08, r24	; 8
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	88 b9       	out	0x08, r24	; 8
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	97 e4       	ldi	r25, 0x47	; 71
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_set_4bit+0xb6>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_set_4bit+0xbc>
 1ee:	00 00       	nop
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	08 95       	ret

000001f8 <lcd_wr_command>:
 1f8:	38 2f       	mov	r19, r24
 1fa:	30 7f       	andi	r19, 0xF0	; 240
 1fc:	28 b1       	in	r18, 0x08	; 8
 1fe:	2f 70       	andi	r18, 0x0F	; 15
 200:	28 b9       	out	0x08, r18	; 8
 202:	98 b1       	in	r25, 0x08	; 8
 204:	93 2b       	or	r25, r19
 206:	98 b9       	out	0x08, r25	; 8
 208:	98 b1       	in	r25, 0x08	; 8
 20a:	9e 7f       	andi	r25, 0xFE	; 254
 20c:	98 b9       	out	0x08, r25	; 8
 20e:	98 b1       	in	r25, 0x08	; 8
 210:	9d 7f       	andi	r25, 0xFD	; 253
 212:	98 b9       	out	0x08, r25	; 8
 214:	98 b1       	in	r25, 0x08	; 8
 216:	94 60       	ori	r25, 0x04	; 4
 218:	98 b9       	out	0x08, r25	; 8
 21a:	ef ef       	ldi	r30, 0xFF	; 255
 21c:	f7 e4       	ldi	r31, 0x47	; 71
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_wr_command+0x26>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_wr_command+0x2c>
 224:	00 00       	nop
 226:	98 b1       	in	r25, 0x08	; 8
 228:	9b 7f       	andi	r25, 0xFB	; 251
 22a:	98 b9       	out	0x08, r25	; 8
 22c:	82 95       	swap	r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	98 b1       	in	r25, 0x08	; 8
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	98 b9       	out	0x08, r25	; 8
 236:	98 b1       	in	r25, 0x08	; 8
 238:	89 2b       	or	r24, r25
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	88 b9       	out	0x08, r24	; 8
 242:	88 b1       	in	r24, 0x08	; 8
 244:	8d 7f       	andi	r24, 0xFD	; 253
 246:	88 b9       	out	0x08, r24	; 8
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	97 e4       	ldi	r25, 0x47	; 71
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_wr_command+0x5a>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_wr_command+0x60>
 258:	00 00       	nop
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	88 b9       	out	0x08, r24	; 8
 260:	08 95       	ret

00000262 <lcd_init>:
 262:	67 df       	rcall	.-306    	; 0x132 <lcd_set_4bit>
 264:	86 e6       	ldi	r24, 0x66	; 102
 266:	9e e0       	ldi	r25, 0x0E	; 14
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x6>
 26c:	00 00       	nop
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	c3 df       	rcall	.-122    	; 0x1f8 <lcd_wr_command>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	c1 df       	rcall	.-126    	; 0x1f8 <lcd_wr_command>
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	bf df       	rcall	.-130    	; 0x1f8 <lcd_wr_command>
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	bd df       	rcall	.-134    	; 0x1f8 <lcd_wr_command>
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	bb cf       	rjmp	.-138    	; 0x1f8 <lcd_wr_command>
 282:	08 95       	ret

00000284 <lcd_home>:
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	b8 cf       	rjmp	.-144    	; 0x1f8 <lcd_wr_command>
 288:	08 95       	ret

0000028a <lcd_cursor>:
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
 28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
 294:	08 95       	ret
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
 29e:	08 95       	ret
 2a0:	8f e7       	ldi	r24, 0x7F	; 127
 2a2:	86 0f       	add	r24, r22
 2a4:	a9 cf       	rjmp	.-174    	; 0x1f8 <lcd_wr_command>
 2a6:	08 95       	ret
 2a8:	8f eb       	ldi	r24, 0xBF	; 191
 2aa:	86 0f       	add	r24, r22
 2ac:	a5 cf       	rjmp	.-182    	; 0x1f8 <lcd_wr_command>
 2ae:	08 95       	ret
 2b0:	83 e9       	ldi	r24, 0x93	; 147
 2b2:	86 0f       	add	r24, r22
 2b4:	a1 cf       	rjmp	.-190    	; 0x1f8 <lcd_wr_command>
 2b6:	08 95       	ret
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	86 0f       	add	r24, r22
 2bc:	9d cf       	rjmp	.-198    	; 0x1f8 <lcd_wr_command>
 2be:	08 95       	ret

000002c0 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 2c0:	cf 93       	push	r28
 2c2:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 2c4:	e2 df       	rcall	.-60     	; 0x28a <lcd_cursor>
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
 2c6:	2c 2f       	mov	r18, r28
 2c8:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
 2ca:	98 b1       	in	r25, 0x08	; 8
 2cc:	9f 70       	andi	r25, 0x0F	; 15
 2ce:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	82 2b       	or	r24, r18
 2d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	8d 7f       	andi	r24, 0xFD	; 253
 2e0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	97 e4       	ldi	r25, 0x47	; 71
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_wr_char+0x2c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_wr_char+0x32>
 2f2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	88 b9       	out	0x08, r24	; 8

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
 2fa:	c2 95       	swap	r28
 2fc:	c0 7f       	andi	r28, 0xF0	; 240
	lcd_port &= 0x0F;
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	88 b9       	out	0x08, r24	; 8
	lcd_port |= alpha_num_char;
 304:	88 b1       	in	r24, 0x08	; 8
 306:	c8 2b       	or	r28, r24
 308:	c8 b9       	out	0x08, r28	; 8
	sbit(lcd_port,RS);
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	8d 7f       	andi	r24, 0xFD	; 253
 314:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 316:	88 b1       	in	r24, 0x08	; 8
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	88 b9       	out	0x08, r24	; 8
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	97 e4       	ldi	r25, 0x47	; 71
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <lcd_wr_char+0x60>
 324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_wr_char+0x66>
 326:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	8b 7f       	andi	r24, 0xFB	; 251
 32c:	88 b9       	out	0x08, r24	; 8
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <buzzerBeep>:
	lcdPrint(1,4,5);
	PORTA &= 0x00;
}
void moveBackward(){
	lcdPrint(1,4,2);
	PORTA |= 0x09;
 332:	88 b1       	in	r24, 0x08	; 8
 334:	88 60       	ori	r24, 0x08	; 8
 336:	88 b9       	out	0x08, r24	; 8
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	9c e2       	ldi	r25, 0x2C	; 44
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <buzzerBeep+0xc>
 346:	00 c0       	rjmp	.+0      	; 0x348 <buzzerBeep+0x16>
 348:	00 00       	nop
 34a:	88 b1       	in	r24, 0x08	; 8
 34c:	18 b8       	out	0x08, r1	; 8
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	9c e2       	ldi	r25, 0x2C	; 44
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <buzzerBeep+0x22>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <buzzerBeep+0x2c>
 35e:	00 00       	nop
 360:	08 95       	ret

00000362 <lcdPrint>:
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	e2 97       	sbiw	r28, 0x32	; 50
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	d8 2e       	mov	r13, r24
 382:	7b 01       	movw	r14, r22
 384:	89 e0       	ldi	r24, 0x09	; 9
 386:	e0 e0       	ldi	r30, 0x00	; 0
 388:	f2 e0       	ldi	r31, 0x02	; 2
 38a:	de 01       	movw	r26, r28
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	8a 95       	dec	r24
 394:	e1 f7       	brne	.-8      	; 0x38e <lcdPrint+0x2c>
 396:	1a 86       	std	Y+10, r1	; 0x0a
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	e8 e2       	ldi	r30, 0x28	; 40
 39c:	f2 e0       	ldi	r31, 0x02	; 2
 39e:	de 01       	movw	r26, r28
 3a0:	1b 96       	adiw	r26, 0x0b	; 11
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	8a 95       	dec	r24
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <lcdPrint+0x40>
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	ea e0       	ldi	r30, 0x0A	; 10
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	de 01       	movw	r26, r28
 3b2:	55 96       	adiw	r26, 0x15	; 21
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <lcdPrint+0x52>
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	fe 01       	movw	r30, r28
 3c0:	7b 96       	adiw	r30, 0x1b	; 27
 3c2:	df 01       	movw	r26, r30
 3c4:	98 2f       	mov	r25, r24
 3c6:	1d 92       	st	X+, r1
 3c8:	9a 95       	dec	r25
 3ca:	e9 f7       	brne	.-6      	; 0x3c6 <lcdPrint+0x64>
 3cc:	97 e0       	ldi	r25, 0x07	; 7
 3ce:	e4 e1       	ldi	r30, 0x14	; 20
 3d0:	f2 e0       	ldi	r31, 0x02	; 2
 3d2:	de 01       	movw	r26, r28
 3d4:	5f 96       	adiw	r26, 0x1f	; 31
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	9a 95       	dec	r25
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <lcdPrint+0x74>
 3de:	fe 01       	movw	r30, r28
 3e0:	b6 96       	adiw	r30, 0x26	; 38
 3e2:	93 e0       	ldi	r25, 0x03	; 3
 3e4:	df 01       	movw	r26, r30
 3e6:	1d 92       	st	X+, r1
 3e8:	9a 95       	dec	r25
 3ea:	e9 f7       	brne	.-6      	; 0x3e6 <lcdPrint+0x84>
 3ec:	96 e0       	ldi	r25, 0x06	; 6
 3ee:	ee e1       	ldi	r30, 0x1E	; 30
 3f0:	f2 e0       	ldi	r31, 0x02	; 2
 3f2:	de 01       	movw	r26, r28
 3f4:	99 96       	adiw	r26, 0x29	; 41
 3f6:	01 90       	ld	r0, Z+
 3f8:	0d 92       	st	X+, r0
 3fa:	9a 95       	dec	r25
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <lcdPrint+0x94>
 3fe:	fe 01       	movw	r30, r28
 400:	bf 96       	adiw	r30, 0x2f	; 47
 402:	df 01       	movw	r26, r30
 404:	1d 92       	st	X+, r1
 406:	8a 95       	dec	r24
 408:	e9 f7       	brne	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40a:	42 30       	cpi	r20, 0x02	; 2
 40c:	51 05       	cpc	r21, r1
 40e:	a1 f0       	breq	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 410:	24 f4       	brge	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	51 05       	cpc	r21, r1
 416:	41 f0       	breq	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 418:	17 c0       	rjmp	.+46     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 41a:	43 30       	cpi	r20, 0x03	; 3
 41c:	51 05       	cpc	r21, r1
 41e:	41 f0       	breq	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 420:	44 30       	cpi	r20, 0x04	; 4
 422:	51 05       	cpc	r21, r1
 424:	69 f0       	breq	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 426:	10 c0       	rjmp	.+32     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 428:	8e 01       	movw	r16, r28
 42a:	0f 5f       	subi	r16, 0xFF	; 255
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
 42e:	18 c0       	rjmp	.+48     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 430:	8e 01       	movw	r16, r28
 432:	0b 5e       	subi	r16, 0xEB	; 235
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	14 c0       	rjmp	.+40     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 438:	8e 01       	movw	r16, r28
 43a:	05 5f       	subi	r16, 0xF5	; 245
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
 43e:	10 c0       	rjmp	.+32     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 440:	8e 01       	movw	r16, r28
 442:	01 5e       	subi	r16, 0xE1	; 225
 444:	1f 4f       	sbci	r17, 0xFF	; 255
 446:	0c c0       	rjmp	.+24     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 448:	8e 01       	movw	r16, r28
 44a:	07 5d       	subi	r16, 0xD7	; 215
 44c:	1f 4f       	sbci	r17, 0xFF	; 255
 44e:	08 c0       	rjmp	.+16     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 450:	6e 2d       	mov	r22, r14
 452:	8d 2d       	mov	r24, r13
 454:	35 df       	rcall	.-406    	; 0x2c0 <lcd_wr_char>
 456:	bf ef       	ldi	r27, 0xFF	; 255
 458:	eb 1a       	sub	r14, r27
 45a:	fb 0a       	sbc	r15, r27
 45c:	0f 5f       	subi	r16, 0xFF	; 255
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
 460:	f8 01       	movw	r30, r16
 462:	40 81       	ld	r20, Z
 464:	40 32       	cpi	r20, 0x20	; 32
 466:	a1 f7       	brne	.-24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 468:	e2 96       	adiw	r28, 0x32	; 50
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	08 95       	ret

00000484 <moveForward>:
 484:	82 b1       	in	r24, 0x02	; 2
 486:	80 7f       	andi	r24, 0xF0	; 240
 488:	82 b9       	out	0x02, r24	; 2
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	82 b9       	out	0x02, r24	; 2
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	63 cf       	rjmp	.-314    	; 0x362 <lcdPrint>
 49c:	08 95       	ret

0000049e <moveLeft>:
}
void moveLeft(){
	lcdPrint(1,4,3);
 49e:	43 e0       	ldi	r20, 0x03	; 3
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	64 e0       	ldi	r22, 0x04	; 4
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	5b df       	rcall	.-330    	; 0x362 <lcdPrint>
	PORTA |= 0x05;
 4ac:	82 b1       	in	r24, 0x02	; 2
 4ae:	85 60       	ori	r24, 0x05	; 5
 4b0:	82 b9       	out	0x02, r24	; 2
 4b2:	08 95       	ret

000004b4 <main>:
void moveRight();
void moveStop();

int main(void)
{
	DDRJ=0xFF;						//Define all led's as output
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	PORTJ=0x00;						//Define all led's as low in the beginning
 4ba:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
	DDRC=0x08;						//Define 3rd pin of port C as output
 4be:	88 e0       	ldi	r24, 0x08	; 8
 4c0:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;						//Define all pins as low in the beginning of port C
 4c2:	18 b8       	out	0x08, r1	; 8
	DDRA |= 0x0F;					//Define Motor Pins as Output
 4c4:	81 b1       	in	r24, 0x01	; 1
 4c6:	8f 60       	ori	r24, 0x0F	; 15
 4c8:	81 b9       	out	0x01, r24	; 1
	PORTA &= 0xF0;					//Define Motor Pins as LOW
 4ca:	82 b1       	in	r24, 0x02	; 2
 4cc:	80 7f       	andi	r24, 0xF0	; 240
 4ce:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;				//Setting PL3 and PL4 pins as output for PWM generation
 4d0:	ea e0       	ldi	r30, 0x0A	; 10
 4d2:	f1 e0       	ldi	r31, 0x01	; 1
 4d4:	80 81       	ld	r24, Z
 4d6:	88 61       	ori	r24, 0x18	; 24
 4d8:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18;			//PL3 and PL4 pins are for velocity control using PWM
 4da:	eb e0       	ldi	r30, 0x0B	; 11
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	80 81       	ld	r24, Z
 4e0:	88 61       	ori	r24, 0x18	; 24
 4e2:	80 83       	st	Z, r24
	int ledGraph=0x01;
	int one=0;
	int wordCounter=1;
	lcd_port_config();
 4e4:	1f de       	rcall	.-962    	; 0x124 <lcd_port_config>
	lcd_init();
 4e6:	bd de       	rcall	.-646    	; 0x262 <lcd_init>
	lcd_home();
 4e8:	cd de       	rcall	.-614    	; 0x284 <lcd_home>
 4ea:	00 e0       	ldi	r16, 0x00	; 0
	DDRA |= 0x0F;					//Define Motor Pins as Output
	PORTA &= 0xF0;					//Define Motor Pins as LOW
	DDRL = DDRL | 0x18;				//Setting PL3 and PL4 pins as output for PWM generation
	PORTL = PORTL | 0x18;			//PL3 and PL4 pins are for velocity control using PWM
	int ledGraph=0x01;
	int one=0;
 4ec:	10 e0       	ldi	r17, 0x00	; 0
 4ee:	ee 24       	eor	r14, r14
	PORTC=0x00;						//Define all pins as low in the beginning of port C
	DDRA |= 0x0F;					//Define Motor Pins as Output
	PORTA &= 0xF0;					//Define Motor Pins as LOW
	DDRL = DDRL | 0x18;				//Setting PL3 and PL4 pins as output for PWM generation
	PORTL = PORTL | 0x18;			//PL3 and PL4 pins are for velocity control using PWM
	int ledGraph=0x01;
 4f0:	e3 94       	inc	r14
 4f2:	f1 2c       	mov	r15, r1
 4f4:	6a c0       	rjmp	.+212    	; 0x5ca <main+0x116>
 4f6:	e5 e0       	ldi	r30, 0x05	; 5
	lcd_home();
	
	while(1){
		while (ledGraph!=(0xFF))
		{
			PORTJ |= ledGraph;
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	80 81       	ld	r24, Z
 4fc:	8e 29       	or	r24, r14
 4fe:	80 83       	st	Z, r24
 500:	0f 5f       	subi	r16, 0xFF	; 255
			one++;
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	c0 e0       	ldi	r28, 0x00	; 0
			for(int i=0;i<one;i++){
 506:	d0 e0       	ldi	r29, 0x00	; 0
 508:	0b c0       	rjmp	.+22     	; 0x520 <main+0x6c>
				buzzerBeep();
 50a:	13 df       	rcall	.-474    	; 0x332 <buzzerBeep>
 50c:	2f ef       	ldi	r18, 0xFF	; 255
 50e:	3f ef       	ldi	r19, 0xFF	; 255
 510:	89 e5       	ldi	r24, 0x59	; 89
 512:	21 50       	subi	r18, 0x01	; 1
 514:	30 40       	sbci	r19, 0x00	; 0
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <main+0x5e>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0x68>
 51c:	00 00       	nop
 51e:	21 96       	adiw	r28, 0x01	; 1
	while(1){
		while (ledGraph!=(0xFF))
		{
			PORTJ |= ledGraph;
			one++;
			for(int i=0;i<one;i++){
 520:	c0 17       	cp	r28, r16
 522:	d1 07       	cpc	r29, r17
 524:	94 f3       	brlt	.-28     	; 0x50a <main+0x56>
 526:	ee 0c       	add	r14, r14
				buzzerBeep();
				_delay_ms(2000);
			}
			ledGraph = ledGraph << 1;
 528:	ff 1c       	adc	r15, r15
			ledGraph |= 0x01;
 52a:	68 94       	set
 52c:	e0 f8       	bld	r14, 0
			
			///////////////One Circle
			moveForward();
 52e:	aa df       	rcall	.-172    	; 0x484 <moveForward>
 530:	9f ef       	ldi	r25, 0xFF	; 255
 532:	2f e7       	ldi	r18, 0x7F	; 127
 534:	36 e0       	ldi	r19, 0x06	; 6
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	91 50       	subi	r25, 0x01	; 1
 53a:	20 40       	sbci	r18, 0x00	; 0
 53c:	30 40       	sbci	r19, 0x00	; 0
 53e:	80 40       	sbci	r24, 0x00	; 0
 540:	d9 f7       	brne	.-10     	; 0x538 <main+0x84>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x90>
 544:	00 00       	nop
			_delay_ms(7000);
			moveLeft();
 546:	ab df       	rcall	.-170    	; 0x49e <moveLeft>
 548:	9f ef       	ldi	r25, 0xFF	; 255
 54a:	2f ef       	ldi	r18, 0xFF	; 255
 54c:	33 eb       	ldi	r19, 0xB3	; 179
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	20 40       	sbci	r18, 0x00	; 0
 552:	30 40       	sbci	r19, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <main+0x9a>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0xa4>
 558:	00 00       	nop
			_delay_ms(4000);
			moveForward();
 55a:	94 df       	rcall	.-216    	; 0x484 <moveForward>
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	9f e7       	ldi	r25, 0x7F	; 127
 560:	26 e0       	ldi	r18, 0x06	; 6
 562:	31 e0       	ldi	r19, 0x01	; 1
 564:	81 50       	subi	r24, 0x01	; 1
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	20 40       	sbci	r18, 0x00	; 0
 56a:	30 40       	sbci	r19, 0x00	; 0
 56c:	d9 f7       	brne	.-10     	; 0x564 <main+0xb0>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0xbc>
 570:	00 00       	nop
			_delay_ms(7000);
			moveLeft();
 572:	95 df       	rcall	.-214    	; 0x49e <moveLeft>
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	23 eb       	ldi	r18, 0xB3	; 179
 57a:	81 50       	subi	r24, 0x01	; 1
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	20 40       	sbci	r18, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <main+0xc6>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0xd0>
 584:	00 00       	nop
			_delay_ms(4000);
			moveForward();
 586:	7e df       	rcall	.-260    	; 0x484 <moveForward>
 588:	3f ef       	ldi	r19, 0xFF	; 255
 58a:	8f e7       	ldi	r24, 0x7F	; 127
 58c:	96 e0       	ldi	r25, 0x06	; 6
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	31 50       	subi	r19, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	20 40       	sbci	r18, 0x00	; 0
 598:	d9 f7       	brne	.-10     	; 0x590 <main+0xdc>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0xe8>
 59c:	00 00       	nop
			_delay_ms(7000);
			moveLeft();
 59e:	7f df       	rcall	.-258    	; 0x49e <moveLeft>
 5a0:	3f ef       	ldi	r19, 0xFF	; 255
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	93 eb       	ldi	r25, 0xB3	; 179
 5a6:	31 50       	subi	r19, 0x01	; 1
 5a8:	80 40       	sbci	r24, 0x00	; 0
 5aa:	90 40       	sbci	r25, 0x00	; 0
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0xf2>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0xfc>
 5b0:	00 00       	nop
			_delay_ms(4000);
			moveForward();
 5b2:	68 df       	rcall	.-304    	; 0x484 <moveForward>
 5b4:	2f ef       	ldi	r18, 0xFF	; 255
 5b6:	3f e7       	ldi	r19, 0x7F	; 127
 5b8:	86 e0       	ldi	r24, 0x06	; 6
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	21 50       	subi	r18, 0x01	; 1
 5be:	30 40       	sbci	r19, 0x00	; 0
 5c0:	80 40       	sbci	r24, 0x00	; 0
 5c2:	90 40       	sbci	r25, 0x00	; 0
 5c4:	d9 f7       	brne	.-10     	; 0x5bc <main+0x108>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <main+0x114>
 5c8:	00 00       	nop
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
	lcd_port_config();
	lcd_init();
	lcd_home();
	
	while(1){
		while (ledGraph!=(0xFF))
 5cc:	e2 16       	cp	r14, r18
 5ce:	f1 04       	cpc	r15, r1
 5d0:	e1 f3       	breq	.-8      	; 0x5ca <main+0x116>
 5d2:	91 cf       	rjmp	.-222    	; 0x4f6 <main+0x42>

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
