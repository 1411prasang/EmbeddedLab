
Exp5-VelocityPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000007ec  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800200  00800200  000007ec  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d15  00000000  00000000  00000953  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e58  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f3  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00003eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d4  00000000  00000000  000044e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000074a  0000074a  000007de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.lcd_port_config 0000000e  000006fa  000006fa  0000078e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_set_4bit 000000c6  00000358  00000358  000003ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_wr_command 0000006a  0000051c  0000051c  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_init 0000002e  000005fa  000005fa  0000068e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_home 00000008  0000072c  0000072c  000007c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_cursor 0000003e  00000586  00000586  0000061a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_wr_char 00000074  000004a8  000004a8  0000053c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_string 0000002c  00000628  00000628  000006bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcd_numeric_value 00000212  00000146  00000146  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.motion_pin_config 00000022  000006a4  000006a4  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.init_ports 00000006  00000744  00000744  000007d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.timer5_init 00000036  000005c4  000005c4  00000658  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.velocity 0000000a  00000722  00000722  000007b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.motion_set 0000000c  00000716  00000716  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.forward 00000008  00000734  00000734  000007c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.stop    00000008  0000073c  0000073c  000007d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.init_devices 0000000e  00000708  00000708  0000079c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.main    0000008a  0000041e  0000041e  000004b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.libgcc.div 00000028  00000654  00000654  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.libgcc.mul 0000001e  000006c6  000006c6  0000075a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.libgcc.div 00000028  0000067c  0000067c  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_fini 00000002  00000752  00000752  000007e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_funcs_on_exit 00000002  00000754  00000754  000007e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_simulator_exit 00000002  00000756  00000756  000007ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.exit    00000016  000006e4  000006e4  00000778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text._Exit   00000004  0000074e  0000074e  000007e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
   8:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
   c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  10:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  14:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  18:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  1c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  20:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  24:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  28:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  2c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  30:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  34:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  38:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  3c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  40:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  44:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  48:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  4c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  50:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  54:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  58:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  5c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  60:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  64:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  68:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  6c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  70:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  74:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  78:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  7c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  80:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  84:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  88:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  8c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  90:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  94:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  98:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  9c:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  a0:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  a4:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  a8:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  ac:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  b0:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  b4:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  b8:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  bc:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  c0:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  c4:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  c8:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  cc:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  d0:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  d4:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  d8:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  dc:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>
  e0:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 0c       	add	r0, r2
  e8:	80 00       	.word	0x0080	; ????

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d1 e2       	ldi	r29, 0x21	; 33
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	0c bf       	out	0x3c, r16	; 60

000000fa <__do_copy_data>:
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	19 c0       	rjmp	.+50     	; 0x134 <__do_clear_bss+0x8>
 102:	b7 91       	elpm	r27, Z+
 104:	a7 91       	elpm	r26, Z+
 106:	37 91       	elpm	r19, Z+
 108:	27 91       	elpm	r18, Z+
 10a:	07 91       	elpm	r16, Z+
 10c:	07 fd       	sbrc	r16, 7
 10e:	0e c0       	rjmp	.+28     	; 0x12c <__do_clear_bss>
 110:	97 91       	elpm	r25, Z+
 112:	87 91       	elpm	r24, Z+
 114:	ef 01       	movw	r28, r30
 116:	f9 2f       	mov	r31, r25
 118:	e8 2f       	mov	r30, r24
 11a:	0b bf       	out	0x3b, r16	; 59
 11c:	07 90       	elpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x22>
 126:	fe 01       	movw	r30, r28
 128:	1b be       	out	0x3b, r1	; 59
 12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_clear_bss+0x8>

0000012c <__do_clear_bss>:
 12c:	1d 92       	st	X+, r1
 12e:	a2 17       	cp	r26, r18
 130:	b3 07       	cpc	r27, r19
 132:	e1 f7       	brne	.-8      	; 0x12c <__do_clear_bss>
 134:	e9 3e       	cpi	r30, 0xE9	; 233
 136:	f4 07       	cpc	r31, r20
 138:	21 f7       	brne	.-56     	; 0x102 <__do_copy_data+0x8>
 13a:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
 13e:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <exit>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>

Disassembly of section .text:

0000074a <__bad_interrupt>:
 74a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_port_config:

000006fa <lcd_port_config>:
 * Logic: This function configures the LCD port pins as output and sets them to 0 initially
 * Example Call: lcd_port_config();
 */
void lcd_port_config(void)
{
	DDRC = DDRC | 0xF7;		// all LCD pins direction set as output
 6fa:	87 b1       	in	r24, 0x07	; 7
 6fc:	87 6f       	ori	r24, 0xF7	; 247
 6fe:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x08;	// all LCD pins set to logic 0 except PC.3 (Buzzer pin)
 700:	88 b1       	in	r24, 0x08	; 8
 702:	88 70       	andi	r24, 0x08	; 8
 704:	88 b9       	out	0x08, r24	; 8
 706:	08 95       	ret

Disassembly of section .text.lcd_set_4bit:

00000358 <lcd_set_4bit>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 358:	86 e6       	ldi	r24, 0x66	; 102
 35a:	9e e0       	ldi	r25, 0x0E	; 14
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_set_4bit+0x4>
 360:	00 00       	nop
 362:	88 b1       	in	r24, 0x08	; 8
 364:	8e 7f       	andi	r24, 0xFE	; 254
 366:	88 b9       	out	0x08, r24	; 8
 368:	88 b1       	in	r24, 0x08	; 8
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	88 b9       	out	0x08, r24	; 8
 36e:	80 e3       	ldi	r24, 0x30	; 48
 370:	88 b9       	out	0x08, r24	; 8
 372:	98 b1       	in	r25, 0x08	; 8
 374:	94 60       	ori	r25, 0x04	; 4
 376:	98 b9       	out	0x08, r25	; 8
 378:	ef ef       	ldi	r30, 0xFF	; 255
 37a:	f7 e4       	ldi	r31, 0x47	; 71
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_set_4bit+0x24>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_set_4bit+0x2a>
 382:	00 00       	nop
 384:	98 b1       	in	r25, 0x08	; 8
 386:	9b 7f       	andi	r25, 0xFB	; 251
 388:	98 b9       	out	0x08, r25	; 8
 38a:	e6 e6       	ldi	r30, 0x66	; 102
 38c:	fe e0       	ldi	r31, 0x0E	; 14
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_set_4bit+0x36>
 392:	00 00       	nop
 394:	98 b1       	in	r25, 0x08	; 8
 396:	9e 7f       	andi	r25, 0xFE	; 254
 398:	98 b9       	out	0x08, r25	; 8
 39a:	98 b1       	in	r25, 0x08	; 8
 39c:	9d 7f       	andi	r25, 0xFD	; 253
 39e:	98 b9       	out	0x08, r25	; 8
 3a0:	88 b9       	out	0x08, r24	; 8
 3a2:	98 b1       	in	r25, 0x08	; 8
 3a4:	94 60       	ori	r25, 0x04	; 4
 3a6:	98 b9       	out	0x08, r25	; 8
 3a8:	ef ef       	ldi	r30, 0xFF	; 255
 3aa:	f7 e4       	ldi	r31, 0x47	; 71
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_set_4bit+0x54>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <lcd_set_4bit+0x5a>
 3b2:	00 00       	nop
 3b4:	98 b1       	in	r25, 0x08	; 8
 3b6:	9b 7f       	andi	r25, 0xFB	; 251
 3b8:	98 b9       	out	0x08, r25	; 8
 3ba:	e6 e6       	ldi	r30, 0x66	; 102
 3bc:	fe e0       	ldi	r31, 0x0E	; 14
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x66>
 3c2:	00 00       	nop
 3c4:	98 b1       	in	r25, 0x08	; 8
 3c6:	9e 7f       	andi	r25, 0xFE	; 254
 3c8:	98 b9       	out	0x08, r25	; 8
 3ca:	98 b1       	in	r25, 0x08	; 8
 3cc:	9d 7f       	andi	r25, 0xFD	; 253
 3ce:	98 b9       	out	0x08, r25	; 8
 3d0:	88 b9       	out	0x08, r24	; 8
 3d2:	88 b1       	in	r24, 0x08	; 8
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	88 b9       	out	0x08, r24	; 8
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	97 e4       	ldi	r25, 0x47	; 71
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_set_4bit+0x84>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <lcd_set_4bit+0x8a>
 3e2:	00 00       	nop
 3e4:	88 b1       	in	r24, 0x08	; 8
 3e6:	8b 7f       	andi	r24, 0xFB	; 251
 3e8:	88 b9       	out	0x08, r24	; 8
 3ea:	e6 e6       	ldi	r30, 0x66	; 102
 3ec:	fe e0       	ldi	r31, 0x0E	; 14
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <lcd_set_4bit+0x96>
 3f2:	00 00       	nop
 3f4:	88 b1       	in	r24, 0x08	; 8
 3f6:	8e 7f       	andi	r24, 0xFE	; 254
 3f8:	88 b9       	out	0x08, r24	; 8
 3fa:	88 b1       	in	r24, 0x08	; 8
 3fc:	8d 7f       	andi	r24, 0xFD	; 253
 3fe:	88 b9       	out	0x08, r24	; 8
 400:	80 e2       	ldi	r24, 0x20	; 32
 402:	88 b9       	out	0x08, r24	; 8
 404:	88 b1       	in	r24, 0x08	; 8
 406:	84 60       	ori	r24, 0x04	; 4
 408:	88 b9       	out	0x08, r24	; 8
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	97 e4       	ldi	r25, 0x47	; 71
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	88 b1       	in	r24, 0x08	; 8
 418:	8b 7f       	andi	r24, 0xFB	; 251
 41a:	88 b9       	out	0x08, r24	; 8
 41c:	08 95       	ret

Disassembly of section .text.lcd_wr_command:

0000051c <lcd_wr_command>:
 */
void lcd_wr_command (unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 51c:	38 2f       	mov	r19, r24
 51e:	30 7f       	andi	r19, 0xF0	; 240
	lcd_port &= 0x0F;
 520:	28 b1       	in	r18, 0x08	; 8
 522:	2f 70       	andi	r18, 0x0F	; 15
 524:	28 b9       	out	0x08, r18	; 8
	lcd_port |= temp;
 526:	98 b1       	in	r25, 0x08	; 8
 528:	93 2b       	or	r25, r19
 52a:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 52c:	98 b1       	in	r25, 0x08	; 8
 52e:	9e 7f       	andi	r25, 0xFE	; 254
 530:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RW);
 532:	98 b1       	in	r25, 0x08	; 8
 534:	9d 7f       	andi	r25, 0xFD	; 253
 536:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,EN);
 538:	98 b1       	in	r25, 0x08	; 8
 53a:	94 60       	ori	r25, 0x04	; 4
 53c:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	ef ef       	ldi	r30, 0xFF	; 255
 540:	f7 e4       	ldi	r31, 0x47	; 71
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <lcd_wr_command+0x26>
 546:	00 c0       	rjmp	.+0      	; 0x548 <lcd_wr_command+0x2c>
 548:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 54a:	98 b1       	in	r25, 0x08	; 8
 54c:	9b 7f       	andi	r25, 0xFB	; 251
 54e:	98 b9       	out	0x08, r25	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 550:	82 95       	swap	r24
 552:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
 554:	98 b1       	in	r25, 0x08	; 8
 556:	9f 70       	andi	r25, 0x0F	; 15
 558:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 55a:	98 b1       	in	r25, 0x08	; 8
 55c:	89 2b       	or	r24, r25
 55e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 560:	88 b1       	in	r24, 0x08	; 8
 562:	8e 7f       	andi	r24, 0xFE	; 254
 564:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 566:	88 b1       	in	r24, 0x08	; 8
 568:	8d 7f       	andi	r24, 0xFD	; 253
 56a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 56c:	88 b1       	in	r24, 0x08	; 8
 56e:	84 60       	ori	r24, 0x04	; 4
 570:	88 b9       	out	0x08, r24	; 8
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	97 e4       	ldi	r25, 0x47	; 71
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <lcd_wr_command+0x5a>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <lcd_wr_command+0x60>
 57c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 57e:	88 b1       	in	r24, 0x08	; 8
 580:	8b 7f       	andi	r24, 0xFB	; 251
 582:	88 b9       	out	0x08, r24	; 8
 584:	08 95       	ret

Disassembly of section .text.lcd_init:

000005fa <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
 5fa:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_set_4bit>
 5fe:	86 e6       	ldi	r24, 0x66	; 102
 600:	9e e0       	ldi	r25, 0x0E	; 14
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <lcd_init+0x8>
 606:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);		// LCD 4-bit mode and 2 lines
 608:	88 e2       	ldi	r24, 0x28	; 40
 60a:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
	lcd_wr_command(0x01);       // Clear display screen
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
	lcd_wr_command(0x06);       // Entry mode
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
	lcd_wr_command(0x0E);       // Display On and Cursor On
 61a:	8e e0       	ldi	r24, 0x0E	; 14
 61c:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
	lcd_wr_command(0x80);       // LCD cursor set to Home position		
 620:	80 e8       	ldi	r24, 0x80	; 128
 622:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
 626:	08 95       	ret

Disassembly of section .text.lcd_home:

0000072c <lcd_home>:
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);		// LCD cursor set to Home position
 72c:	80 e8       	ldi	r24, 0x80	; 128
 72e:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
 732:	08 95       	ret

Disassembly of section .text.lcd_cursor:

00000586 <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	71 f0       	breq	.+28     	; 0x5a6 <lcd_cursor+0x20>
 58a:	18 f4       	brcc	.+6      	; 0x592 <lcd_cursor+0xc>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	31 f0       	breq	.+12     	; 0x59c <lcd_cursor+0x16>
 590:	08 95       	ret
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	69 f0       	breq	.+26     	; 0x5b0 <lcd_cursor+0x2a>
 596:	84 30       	cpi	r24, 0x04	; 4
 598:	81 f0       	breq	.+32     	; 0x5ba <lcd_cursor+0x34>
 59a:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 59c:	8f e7       	ldi	r24, 0x7F	; 127
 59e:	86 0f       	add	r24, r22
 5a0:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
 5a4:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 5a6:	8f eb       	ldi	r24, 0xBF	; 191
 5a8:	86 0f       	add	r24, r22
 5aa:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
 5ae:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 5b0:	83 e9       	ldi	r24, 0x93	; 147
 5b2:	86 0f       	add	r24, r22
 5b4:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
 5b8:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 5ba:	83 ed       	ldi	r24, 0xD3	; 211
 5bc:	86 0f       	add	r24, r22
 5be:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_wr_command>
 5c2:	08 95       	ret

Disassembly of section .text.lcd_wr_char:

000004a8 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 4a8:	cf 93       	push	r28
 4aa:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 4ac:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_cursor>
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
 4b0:	2c 2f       	mov	r18, r28
 4b2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
 4b4:	98 b1       	in	r25, 0x08	; 8
 4b6:	9f 70       	andi	r25, 0x0F	; 15
 4b8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 4ba:	88 b1       	in	r24, 0x08	; 8
 4bc:	82 2b       	or	r24, r18
 4be:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 4c0:	88 b1       	in	r24, 0x08	; 8
 4c2:	81 60       	ori	r24, 0x01	; 1
 4c4:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 4c6:	88 b1       	in	r24, 0x08	; 8
 4c8:	8d 7f       	andi	r24, 0xFD	; 253
 4ca:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 4cc:	88 b1       	in	r24, 0x08	; 8
 4ce:	84 60       	ori	r24, 0x04	; 4
 4d0:	88 b9       	out	0x08, r24	; 8
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	97 e4       	ldi	r25, 0x47	; 71
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <lcd_wr_char+0x2e>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <lcd_wr_char+0x34>
 4dc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 4de:	88 b1       	in	r24, 0x08	; 8
 4e0:	8b 7f       	andi	r24, 0xFB	; 251
 4e2:	88 b9       	out	0x08, r24	; 8

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
 4e4:	c2 95       	swap	r28
 4e6:	c0 7f       	andi	r28, 0xF0	; 240
	lcd_port &= 0x0F;
 4e8:	88 b1       	in	r24, 0x08	; 8
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	88 b9       	out	0x08, r24	; 8
	lcd_port |= alpha_num_char;
 4ee:	88 b1       	in	r24, 0x08	; 8
 4f0:	c8 2b       	or	r28, r24
 4f2:	c8 b9       	out	0x08, r28	; 8
	sbit(lcd_port,RS);
 4f4:	88 b1       	in	r24, 0x08	; 8
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 4fa:	88 b1       	in	r24, 0x08	; 8
 4fc:	8d 7f       	andi	r24, 0xFD	; 253
 4fe:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 500:	88 b1       	in	r24, 0x08	; 8
 502:	84 60       	ori	r24, 0x04	; 4
 504:	88 b9       	out	0x08, r24	; 8
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	97 e4       	ldi	r25, 0x47	; 71
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <lcd_wr_char+0x62>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <lcd_wr_char+0x68>
 510:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 512:	88 b1       	in	r24, 0x08	; 8
 514:	8b 7f       	andi	r24, 0xFB	; 251
 516:	88 b9       	out	0x08, r24	; 8
}
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

Disassembly of section .text.lcd_string:

00000628 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	08 2f       	mov	r16, r24
 632:	16 2f       	mov	r17, r22
 634:	ea 01       	movw	r28, r20
	while(*str != '\0')
 636:	06 c0       	rjmp	.+12     	; 0x644 <lcd_string+0x1c>
	{
		lcd_wr_char(row, column, *str);
 638:	61 2f       	mov	r22, r17
 63a:	80 2f       	mov	r24, r16
 63c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
		str++;
 640:	21 96       	adiw	r28, 0x01	; 1
		column+=1;
 642:	1f 5f       	subi	r17, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 644:	48 81       	ld	r20, Y
 646:	41 11       	cpse	r20, r1
 648:	f7 cf       	rjmp	.-18     	; 0x638 <lcd_string+0x10>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	08 95       	ret

Disassembly of section .text.lcd_numeric_value:

00000146 <lcd_numeric_value>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	08 2f       	mov	r16, r24
 15e:	16 2f       	mov	r17, r22
 160:	6a 01       	movw	r12, r20
 162:	79 01       	movw	r14, r18
 164:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_cursor>
 168:	8d e2       	ldi	r24, 0x2D	; 45
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	dd 20       	and	r13, r13
 16e:	5c f4       	brge	.+22     	; 0x186 <lcd_numeric_value+0x40>
 170:	d1 94       	neg	r13
 172:	c1 94       	neg	r12
 174:	d1 08       	sbc	r13, r1
 176:	ae 01       	movw	r20, r28
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	61 2f       	mov	r22, r17
 17e:	80 2f       	mov	r24, r16
 180:	0e 94 14 03 	call	0x628	; 0x628 <lcd_string>
 184:	1f 5f       	subi	r17, 0xFF	; 255
 186:	00 23       	and	r16, r16
 188:	11 f0       	breq	.+4      	; 0x18e <lcd_numeric_value+0x48>
 18a:	11 11       	cpse	r17, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <lcd_numeric_value+0x4e>
 18e:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_home>
 192:	04 c0       	rjmp	.+8      	; 0x19c <lcd_numeric_value+0x56>
 194:	61 2f       	mov	r22, r17
 196:	80 2f       	mov	r24, r16
 198:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_cursor>
 19c:	25 e0       	ldi	r18, 0x05	; 5
 19e:	e2 16       	cp	r14, r18
 1a0:	f1 04       	cpc	r15, r1
 1a2:	99 f4       	brne	.+38     	; 0x1ca <lcd_numeric_value+0x84>
 1a4:	c6 01       	movw	r24, r12
 1a6:	60 e1       	ldi	r22, 0x10	; 16
 1a8:	77 e2       	ldi	r23, 0x27	; 39
 1aa:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 1ae:	ab 01       	movw	r20, r22
 1b0:	40 5d       	subi	r20, 0xD0	; 208
 1b2:	5f 4f       	sbci	r21, 0xFF	; 255
 1b4:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 1b8:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1bc:	61 2f       	mov	r22, r17
 1be:	80 2f       	mov	r24, r16
 1c0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
 1c4:	1f 5f       	subi	r17, 0xFF	; 255
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <lcd_numeric_value+0x86>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	34 e0       	ldi	r19, 0x04	; 4
 1ce:	e3 16       	cp	r14, r19
 1d0:	f1 04       	cpc	r15, r1
 1d2:	11 f0       	breq	.+4      	; 0x1d8 <lcd_numeric_value+0x92>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	71 f5       	brne	.+92     	; 0x234 <lcd_numeric_value+0xee>
 1d8:	c6 01       	movw	r24, r12
 1da:	68 ee       	ldi	r22, 0xE8	; 232
 1dc:	73 e0       	ldi	r23, 0x03	; 3
 1de:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 1e2:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <temp+0x1>
 1e6:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <temp>
 1ea:	9b 01       	movw	r18, r22
 1ec:	ad ec       	ldi	r26, 0xCD	; 205
 1ee:	bc ec       	ldi	r27, 0xCC	; 204
 1f0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__umulhisi3>
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	ac 01       	movw	r20, r24
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	84 0f       	add	r24, r20
 214:	95 1f       	adc	r25, r21
 216:	28 1b       	sub	r18, r24
 218:	39 0b       	sbc	r19, r25
 21a:	a9 01       	movw	r20, r18
 21c:	40 5d       	subi	r20, 0xD0	; 208
 21e:	5f 4f       	sbci	r21, 0xFF	; 255
 220:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <thousand+0x1>
 224:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <thousand>
 228:	61 2f       	mov	r22, r17
 22a:	80 2f       	mov	r24, r16
 22c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
 230:	1f 5f       	subi	r17, 0xFF	; 255
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	33 e0       	ldi	r19, 0x03	; 3
 236:	e3 16       	cp	r14, r19
 238:	f1 04       	cpc	r15, r1
 23a:	11 f0       	breq	.+4      	; 0x240 <lcd_numeric_value+0xfa>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	71 f5       	brne	.+92     	; 0x29c <lcd_numeric_value+0x156>
 240:	c6 01       	movw	r24, r12
 242:	64 e6       	ldi	r22, 0x64	; 100
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 24a:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <temp+0x1>
 24e:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <temp>
 252:	9b 01       	movw	r18, r22
 254:	ad ec       	ldi	r26, 0xCD	; 205
 256:	bc ec       	ldi	r27, 0xCC	; 204
 258:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__umulhisi3>
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	ac 01       	movw	r20, r24
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	84 0f       	add	r24, r20
 27c:	95 1f       	adc	r25, r21
 27e:	28 1b       	sub	r18, r24
 280:	39 0b       	sbc	r19, r25
 282:	a9 01       	movw	r20, r18
 284:	40 5d       	subi	r20, 0xD0	; 208
 286:	5f 4f       	sbci	r21, 0xFF	; 255
 288:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <hundred+0x1>
 28c:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <hundred>
 290:	61 2f       	mov	r22, r17
 292:	80 2f       	mov	r24, r16
 294:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
 298:	1f 5f       	subi	r17, 0xFF	; 255
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	32 e0       	ldi	r19, 0x02	; 2
 29e:	e3 16       	cp	r14, r19
 2a0:	f1 04       	cpc	r15, r1
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_numeric_value+0x162>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	71 f5       	brne	.+92     	; 0x304 <lcd_numeric_value+0x1be>
 2a8:	c6 01       	movw	r24, r12
 2aa:	6a e0       	ldi	r22, 0x0A	; 10
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 2b2:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <temp+0x1>
 2b6:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <temp>
 2ba:	9b 01       	movw	r18, r22
 2bc:	ad ec       	ldi	r26, 0xCD	; 205
 2be:	bc ec       	ldi	r27, 0xCC	; 204
 2c0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__umulhisi3>
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	ac 01       	movw	r20, r24
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	84 0f       	add	r24, r20
 2e4:	95 1f       	adc	r25, r21
 2e6:	28 1b       	sub	r18, r24
 2e8:	39 0b       	sbc	r19, r25
 2ea:	a9 01       	movw	r20, r18
 2ec:	40 5d       	subi	r20, 0xD0	; 208
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <tens+0x1>
 2f4:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <tens>
 2f8:	61 2f       	mov	r22, r17
 2fa:	80 2f       	mov	r24, r16
 2fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
 300:	1f 5f       	subi	r17, 0xFF	; 255
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	31 e0       	ldi	r19, 0x01	; 1
 306:	e3 16       	cp	r14, r19
 308:	f1 04       	cpc	r15, r1
 30a:	11 f0       	breq	.+4      	; 0x310 <lcd_numeric_value+0x1ca>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	89 f4       	brne	.+34     	; 0x332 <lcd_numeric_value+0x1ec>
 310:	c6 01       	movw	r24, r12
 312:	6a e0       	ldi	r22, 0x0A	; 10
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 31a:	ac 01       	movw	r20, r24
 31c:	40 5d       	subi	r20, 0xD0	; 208
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <unit>
 324:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <unit+0x1>
 328:	61 2f       	mov	r22, r17
 32a:	80 2f       	mov	r24, r16
 32c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
 330:	1f 5f       	subi	r17, 0xFF	; 255
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	e8 16       	cp	r14, r24
 336:	f1 04       	cpc	r15, r1
 338:	2c f0       	brlt	.+10     	; 0x344 <lcd_numeric_value+0x1fe>
 33a:	45 e4       	ldi	r20, 0x45	; 69
 33c:	61 2f       	mov	r22, r17
 33e:	80 2f       	mov	r24, r16
 340:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_wr_char>
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	08 95       	ret

Disassembly of section .text.motion_pin_config:

000006a4 <motion_pin_config>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 6a4:	81 b1       	in	r24, 0x01	; 1
 6a6:	8f 60       	ori	r24, 0x0F	; 15
 6a8:	81 b9       	out	0x01, r24	; 1
 6aa:	82 b1       	in	r24, 0x02	; 2
 6ac:	80 7f       	andi	r24, 0xF0	; 240
 6ae:	82 b9       	out	0x02, r24	; 2
 6b0:	ea e0       	ldi	r30, 0x0A	; 10
 6b2:	f1 e0       	ldi	r31, 0x01	; 1
 6b4:	80 81       	ld	r24, Z
 6b6:	88 61       	ori	r24, 0x18	; 24
 6b8:	80 83       	st	Z, r24
 6ba:	eb e0       	ldi	r30, 0x0B	; 11
 6bc:	f1 e0       	ldi	r31, 0x01	; 1
 6be:	80 81       	ld	r24, Z
 6c0:	88 61       	ori	r24, 0x18	; 24
 6c2:	80 83       	st	Z, r24
 6c4:	08 95       	ret

Disassembly of section .text.init_ports:

00000744 <init_ports>:
}

//Function to initialize ports
void init_ports()
{
	motion_pin_config();
 744:	0e 94 52 03 	call	0x6a4	; 0x6a4 <motion_pin_config>
 748:	08 95       	ret

Disassembly of section .text.timer5_init:

000005c4 <timer5_init>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 5c4:	e1 e2       	ldi	r30, 0x21	; 33
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	10 82       	st	Z, r1
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
 5d6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
 5da:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
 5de:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
 5e2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
 5e6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
 5ea:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
 5ee:	89 ea       	ldi	r24, 0xA9	; 169
 5f0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 5f4:	89 e0       	ldi	r24, 0x09	; 9
 5f6:	80 83       	st	Z, r24
 5f8:	08 95       	ret

Disassembly of section .text.velocity:

00000722 <velocity>:
 722:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
 726:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
 72a:	08 95       	ret

Disassembly of section .text.motion_set:

00000716 <motion_set>:
 716:	8f 70       	andi	r24, 0x0F	; 15
 718:	92 b1       	in	r25, 0x02	; 2
 71a:	90 7f       	andi	r25, 0xF0	; 240
 71c:	89 2b       	or	r24, r25
 71e:	82 b9       	out	0x02, r24	; 2
 720:	08 95       	ret

Disassembly of section .text.forward:

00000734 <forward>:
 734:	86 e0       	ldi	r24, 0x06	; 6
 736:	0e 94 8b 03 	call	0x716	; 0x716 <motion_set>
 73a:	08 95       	ret

Disassembly of section .text.stop:

0000073c <stop>:
}

void stop (void)
{
	motion_set(0x00);
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	0e 94 8b 03 	call	0x716	; 0x716 <motion_set>
 742:	08 95       	ret

Disassembly of section .text.init_devices:

00000708 <init_devices>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 708:	f8 94       	cli
 70a:	0e 94 a2 03 	call	0x744	; 0x744 <init_ports>
 70e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <timer5_init>
 712:	78 94       	sei
 714:	08 95       	ret

Disassembly of section .text.main:

0000041e <main>:
 41e:	0e 94 84 03 	call	0x708	; 0x708 <init_devices>
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
 428:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
 42c:	88 e0       	ldi	r24, 0x08	; 8
 42e:	87 b9       	out	0x07, r24	; 7
 430:	18 b8       	out	0x08, r1	; 8
 432:	81 b1       	in	r24, 0x01	; 1
 434:	8f 60       	ori	r24, 0x0F	; 15
 436:	81 b9       	out	0x01, r24	; 1
 438:	82 b1       	in	r24, 0x02	; 2
 43a:	80 7f       	andi	r24, 0xF0	; 240
 43c:	82 b9       	out	0x02, r24	; 2
 43e:	ea e0       	ldi	r30, 0x0A	; 10
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	80 81       	ld	r24, Z
 444:	88 61       	ori	r24, 0x18	; 24
 446:	80 83       	st	Z, r24
 448:	eb e0       	ldi	r30, 0x0B	; 11
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	80 81       	ld	r24, Z
 44e:	88 61       	ori	r24, 0x18	; 24
 450:	80 83       	st	Z, r24
 452:	0e 94 7d 03 	call	0x6fa	; 0x6fa <lcd_port_config>
 456:	0e 94 fd 02 	call	0x5fa	; 0x5fa <lcd_init>
 45a:	0e 94 96 03 	call	0x72c	; 0x72c <lcd_home>
 45e:	c5 e2       	ldi	r28, 0x25	; 37
 460:	d1 e0       	ldi	r29, 0x01	; 1
 462:	68 81       	ld	r22, Y
 464:	88 81       	ld	r24, Y
 466:	0e 94 91 03 	call	0x722	; 0x722 <velocity>
 46a:	48 81       	ld	r20, Y
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	23 e0       	ldi	r18, 0x03	; 3
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	66 e0       	ldi	r22, 0x06	; 6
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 a3 00 	call	0x146	; 0x146 <__data_load_end>
 47a:	0e 94 9a 03 	call	0x734	; 0x734 <forward>
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	9c e2       	ldi	r25, 0x2C	; 44
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <main+0x66>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x70>
 48e:	00 00       	nop
 490:	0e 94 9e 03 	call	0x73c	; 0x73c <stop>
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	8f e7       	ldi	r24, 0x7F	; 127
 498:	96 e1       	ldi	r25, 0x16	; 22
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	80 40       	sbci	r24, 0x00	; 0
 49e:	90 40       	sbci	r25, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <main+0x7c>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <main+0x86>
 4a4:	00 00       	nop
 4a6:	db cf       	rjmp	.-74     	; 0x45e <main+0x40>

Disassembly of section .text.libgcc.div:

00000654 <__divmodhi4>:
 654:	97 fb       	bst	r25, 7
 656:	07 2e       	mov	r0, r23
 658:	16 f4       	brtc	.+4      	; 0x65e <__divmodhi4+0xa>
 65a:	00 94       	com	r0
 65c:	07 d0       	rcall	.+14     	; 0x66c <__divmodhi4_neg1>
 65e:	77 fd       	sbrc	r23, 7
 660:	09 d0       	rcall	.+18     	; 0x674 <__divmodhi4_neg2>
 662:	0e 94 3e 03 	call	0x67c	; 0x67c <__udivmodhi4>
 666:	07 fc       	sbrc	r0, 7
 668:	05 d0       	rcall	.+10     	; 0x674 <__divmodhi4_neg2>
 66a:	3e f4       	brtc	.+14     	; 0x67a <__divmodhi4_exit>

0000066c <__divmodhi4_neg1>:
 66c:	90 95       	com	r25
 66e:	81 95       	neg	r24
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	08 95       	ret

00000674 <__divmodhi4_neg2>:
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255

0000067a <__divmodhi4_exit>:
 67a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000006c6 <__umulhisi3>:
 6c6:	a2 9f       	mul	r26, r18
 6c8:	b0 01       	movw	r22, r0
 6ca:	b3 9f       	mul	r27, r19
 6cc:	c0 01       	movw	r24, r0
 6ce:	a3 9f       	mul	r26, r19
 6d0:	70 0d       	add	r23, r0
 6d2:	81 1d       	adc	r24, r1
 6d4:	11 24       	eor	r1, r1
 6d6:	91 1d       	adc	r25, r1
 6d8:	b2 9f       	mul	r27, r18
 6da:	70 0d       	add	r23, r0
 6dc:	81 1d       	adc	r24, r1
 6de:	11 24       	eor	r1, r1
 6e0:	91 1d       	adc	r25, r1
 6e2:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000067c <__udivmodhi4>:
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	51 e1       	ldi	r21, 0x11	; 17
 682:	07 c0       	rjmp	.+14     	; 0x692 <__udivmodhi4_ep>

00000684 <__udivmodhi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	a6 17       	cp	r26, r22
 68a:	b7 07       	cpc	r27, r23
 68c:	10 f0       	brcs	.+4      	; 0x692 <__udivmodhi4_ep>
 68e:	a6 1b       	sub	r26, r22
 690:	b7 0b       	sbc	r27, r23

00000692 <__udivmodhi4_ep>:
 692:	88 1f       	adc	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	5a 95       	dec	r21
 698:	a9 f7       	brne	.-22     	; 0x684 <__udivmodhi4_loop>
 69a:	80 95       	com	r24
 69c:	90 95       	com	r25
 69e:	bc 01       	movw	r22, r24
 6a0:	cd 01       	movw	r24, r26
 6a2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000752 <_fini>:
 752:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000754 <__funcs_on_exit>:
 754:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000756 <__simulator_exit>:
 756:	08 95       	ret

Disassembly of section .text.exit:

000006e4 <exit>:
 6e4:	ec 01       	movw	r28, r24
 6e6:	0e 94 aa 03 	call	0x754	; 0x754 <__funcs_on_exit>
 6ea:	0e 94 a9 03 	call	0x752	; 0x752 <_fini>
 6ee:	ce 01       	movw	r24, r28
 6f0:	0e 94 ab 03 	call	0x756	; 0x756 <__simulator_exit>
 6f4:	ce 01       	movw	r24, r28
 6f6:	0e 94 a7 03 	call	0x74e	; 0x74e <_Exit>

Disassembly of section .text._Exit:

0000074e <_Exit>:
 74e:	0e 94 a1 00 	call	0x142	; 0x142 <_exit>
