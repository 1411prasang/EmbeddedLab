
sirMotorCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ca  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c7b  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e8  00000000  00000000  00002345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f6  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000481  00000000  00000000  0000301a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000349b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	3a d0       	rcall	.+116    	; 0x16a <main>
  f6:	db c0       	rjmp	.+438    	; 0x2ae <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <motion_pin_config>:
#include <util/delay.h>


void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	8f 60       	ori	r24, 0x0F	; 15
  fe:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
 100:	82 b1       	in	r24, 0x02	; 2
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 106:	ea e0       	ldi	r30, 0x0A	; 10
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	80 81       	ld	r24, Z
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
 110:	eb e0       	ldi	r30, 0x0B	; 11
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	80 81       	ld	r24, Z
 116:	88 61       	ori	r24, 0x18	; 24
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <port_init>:
}

//Function to initialize ports
void port_init()
{
	motion_pin_config();
 11c:	ee cf       	rjmp	.-36     	; 0xfa <motion_pin_config>
 11e:	08 95       	ret

00000120 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 120:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
 122:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 124:	90 7f       	andi	r25, 0xF0	; 240
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 126:	89 2b       	or	r24, r25
	PORTA = PortARestore; 			// setting the command to the port
 128:	82 b9       	out	0x02, r24	; 2
 12a:	08 95       	ret

0000012c <forward>:
}


void forward (void) //both wheels forward
{
	motion_set(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	f8 cf       	rjmp	.-16     	; 0x120 <motion_set>
 130:	08 95       	ret

00000132 <back>:
}

void back (void) //both wheels backward
{
	motion_set(0x09);
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	f5 cf       	rjmp	.-22     	; 0x120 <motion_set>
 136:	08 95       	ret

00000138 <left>:
}

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	f2 cf       	rjmp	.-28     	; 0x120 <motion_set>
 13c:	08 95       	ret

0000013e <right>:
}

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	ef cf       	rjmp	.-34     	; 0x120 <motion_set>
 142:	08 95       	ret

00000144 <soft_left>:
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	ec cf       	rjmp	.-40     	; 0x120 <motion_set>
 148:	08 95       	ret

0000014a <soft_right>:
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	e9 cf       	rjmp	.-46     	; 0x120 <motion_set>
 14e:	08 95       	ret

00000150 <soft_left_2>:
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	e6 cf       	rjmp	.-52     	; 0x120 <motion_set>
 154:	08 95       	ret

00000156 <soft_right_2>:
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	e3 cf       	rjmp	.-58     	; 0x120 <motion_set>
 15a:	08 95       	ret

0000015c <stop>:
}

void stop (void) //hard stop
{
	motion_set(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	e0 cf       	rjmp	.-64     	; 0x120 <motion_set>
 160:	08 95       	ret

00000162 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 162:	f8 94       	cli
	port_init();
 164:	db df       	rcall	.-74     	; 0x11c <port_init>
	sei(); //Enables the global interrupts
 166:	78 94       	sei
 168:	08 95       	ret

0000016a <main>:


//Main Function
int main()
{
	init_devices();
 16a:	fb df       	rcall	.-10     	; 0x162 <init_devices>
	
	while(1)
	{
		
		forward(); //both wheels forward
 16c:	df df       	rcall	.-66     	; 0x12c <forward>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9c e2       	ldi	r25, 0x2C	; 44
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xa>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x14>
 17e:	00 00       	nop
		_delay_ms(1000);

		stop();
 180:	ed df       	rcall	.-38     	; 0x15c <stop>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	8f e7       	ldi	r24, 0x7F	; 127
 186:	96 e1       	ldi	r25, 0x16	; 22
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x1e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x28>
 192:	00 00       	nop
		_delay_ms(500);
		
		back(); //bpth wheels backward
 194:	ce df       	rcall	.-100    	; 0x132 <back>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	9c e2       	ldi	r25, 0x2C	; 44
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x32>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x3c>
 1a6:	00 00       	nop
		_delay_ms(1000);

		stop();
 1a8:	d9 df       	rcall	.-78     	; 0x15c <stop>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	8f e7       	ldi	r24, 0x7F	; 127
 1ae:	96 e1       	ldi	r25, 0x16	; 22
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x46>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x50>
 1ba:	00 00       	nop
		_delay_ms(500);
		
		left(); //Left wheel backward, Right wheel forward
 1bc:	bd df       	rcall	.-134    	; 0x138 <left>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	9c e2       	ldi	r25, 0x2C	; 44
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x5a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x64>
 1ce:	00 00       	nop
		_delay_ms(1000);
		
		stop();
 1d0:	c5 df       	rcall	.-118    	; 0x15c <stop>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	8f e7       	ldi	r24, 0x7F	; 127
 1d6:	96 e1       	ldi	r25, 0x16	; 22
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x6e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x78>
 1e2:	00 00       	nop
		_delay_ms(500);
		
		right(); //Left wheel forward, Right wheel backward
 1e4:	ac df       	rcall	.-168    	; 0x13e <right>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	9c e2       	ldi	r25, 0x2C	; 44
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x82>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x8c>
 1f6:	00 00       	nop
		_delay_ms(1000);

		stop();
 1f8:	b1 df       	rcall	.-158    	; 0x15c <stop>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	8f e7       	ldi	r24, 0x7F	; 127
 1fe:	96 e1       	ldi	r25, 0x16	; 22
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x96>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0xa0>
 20a:	00 00       	nop
		_delay_ms(500);

		soft_left(); //Left wheel stationary, Right wheel forward
 20c:	9b df       	rcall	.-202    	; 0x144 <soft_left>
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	9c e2       	ldi	r25, 0x2C	; 44
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xaa>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xb4>
 21e:	00 00       	nop
		_delay_ms(1000);
		
		stop();
 220:	9d df       	rcall	.-198    	; 0x15c <stop>
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	96 e1       	ldi	r25, 0x16	; 22
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xbe>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0xc8>
		_delay_ms(500);

		soft_right(); //Left wheel forward, Right wheel is stationary
 232:	00 00       	nop
 234:	8a df       	rcall	.-236    	; 0x14a <soft_right>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	9c e2       	ldi	r25, 0x2C	; 44
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xd2>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0xdc>
		_delay_ms(1000);

		stop();
 246:	00 00       	nop
 248:	89 df       	rcall	.-238    	; 0x15c <stop>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	96 e1       	ldi	r25, 0x16	; 22
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0xe6>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0xf0>
		_delay_ms(500);

		soft_left_2(); //Left wheel backward, right wheel stationary
 25a:	00 00       	nop
 25c:	79 df       	rcall	.-270    	; 0x150 <soft_left_2>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	9c e2       	ldi	r25, 0x2C	; 44
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0xfa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x104>
		_delay_ms(1000);

		stop();
 26e:	00 00       	nop
 270:	75 df       	rcall	.-278    	; 0x15c <stop>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	8f e7       	ldi	r24, 0x7F	; 127
 276:	96 e1       	ldi	r25, 0x16	; 22
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x10e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x118>
		_delay_ms(500);

		soft_right_2(); //Left wheel stationary, Right wheel backward
 282:	00 00       	nop
 284:	68 df       	rcall	.-304    	; 0x156 <soft_right_2>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9c e2       	ldi	r25, 0x2C	; 44
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x122>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x12c>
 296:	00 00       	nop
		_delay_ms(1000);

		stop();
 298:	61 df       	rcall	.-318    	; 0x15c <stop>
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	9c e2       	ldi	r25, 0x2C	; 44
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x136>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x140>
 2aa:	00 00       	nop
 2ac:	5f cf       	rjmp	.-322    	; 0x16c <main+0x2>

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
