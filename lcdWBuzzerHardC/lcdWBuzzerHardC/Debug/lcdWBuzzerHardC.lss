
lcdWBuzzerHardC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000004ce  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001789  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e36  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000946  00000000  00000000  00002c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000692  00000000  00000000  000036e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b4f  00000000  00000000  00003d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000048c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ec       	ldi	r30, 0xCE	; 206
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 33       	cpi	r26, 0x32	; 50
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	65 d1       	rcall	.+714    	; 0x3ea <main>
 120:	d4 c1       	rjmp	.+936    	; 0x4ca <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_port_config>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	87 6f       	ori	r24, 0xF7	; 247
 128:	87 b9       	out	0x07, r24	; 7
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	88 70       	andi	r24, 0x08	; 8
 12e:	88 b9       	out	0x08, r24	; 8
 130:	08 95       	ret

00000132 <lcd_set_4bit>:
 132:	86 e6       	ldi	r24, 0x66	; 102
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_set_4bit+0x4>
 13a:	00 00       	nop
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	88 b9       	out	0x08, r24	; 8
 142:	88 b1       	in	r24, 0x08	; 8
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	88 b9       	out	0x08, r24	; 8
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	88 b9       	out	0x08, r24	; 8
 14c:	98 b1       	in	r25, 0x08	; 8
 14e:	94 60       	ori	r25, 0x04	; 4
 150:	98 b9       	out	0x08, r25	; 8
 152:	ef ef       	ldi	r30, 0xFF	; 255
 154:	f7 e4       	ldi	r31, 0x47	; 71
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_set_4bit+0x24>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_set_4bit+0x2a>
 15c:	00 00       	nop
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	9b 7f       	andi	r25, 0xFB	; 251
 162:	98 b9       	out	0x08, r25	; 8
 164:	e6 e6       	ldi	r30, 0x66	; 102
 166:	fe e0       	ldi	r31, 0x0E	; 14
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_set_4bit+0x36>
 16c:	00 00       	nop
 16e:	98 b1       	in	r25, 0x08	; 8
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	98 b9       	out	0x08, r25	; 8
 174:	98 b1       	in	r25, 0x08	; 8
 176:	9d 7f       	andi	r25, 0xFD	; 253
 178:	98 b9       	out	0x08, r25	; 8
 17a:	88 b9       	out	0x08, r24	; 8
 17c:	98 b1       	in	r25, 0x08	; 8
 17e:	94 60       	ori	r25, 0x04	; 4
 180:	98 b9       	out	0x08, r25	; 8
 182:	ef ef       	ldi	r30, 0xFF	; 255
 184:	f7 e4       	ldi	r31, 0x47	; 71
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x54>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_set_4bit+0x5a>
 18c:	00 00       	nop
 18e:	98 b1       	in	r25, 0x08	; 8
 190:	9b 7f       	andi	r25, 0xFB	; 251
 192:	98 b9       	out	0x08, r25	; 8
 194:	e6 e6       	ldi	r30, 0x66	; 102
 196:	fe e0       	ldi	r31, 0x0E	; 14
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_set_4bit+0x66>
 19c:	00 00       	nop
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	9e 7f       	andi	r25, 0xFE	; 254
 1a2:	98 b9       	out	0x08, r25	; 8
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	9d 7f       	andi	r25, 0xFD	; 253
 1a8:	98 b9       	out	0x08, r25	; 8
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	97 e4       	ldi	r25, 0x47	; 71
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_set_4bit+0x84>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_set_4bit+0x8a>
 1bc:	00 00       	nop
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	e6 e6       	ldi	r30, 0x66	; 102
 1c6:	fe e0       	ldi	r31, 0x0E	; 14
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_set_4bit+0x96>
 1cc:	00 00       	nop
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	88 b9       	out	0x08, r24	; 8
 1da:	80 e2       	ldi	r24, 0x20	; 32
 1dc:	88 b9       	out	0x08, r24	; 8
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	88 b9       	out	0x08, r24	; 8
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	97 e4       	ldi	r25, 0x47	; 71
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_set_4bit+0xb6>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_set_4bit+0xbc>
 1ee:	00 00       	nop
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	08 95       	ret

000001f8 <lcd_wr_command>:
 1f8:	38 2f       	mov	r19, r24
 1fa:	30 7f       	andi	r19, 0xF0	; 240
 1fc:	28 b1       	in	r18, 0x08	; 8
 1fe:	2f 70       	andi	r18, 0x0F	; 15
 200:	28 b9       	out	0x08, r18	; 8
 202:	98 b1       	in	r25, 0x08	; 8
 204:	93 2b       	or	r25, r19
 206:	98 b9       	out	0x08, r25	; 8
 208:	98 b1       	in	r25, 0x08	; 8
 20a:	9e 7f       	andi	r25, 0xFE	; 254
 20c:	98 b9       	out	0x08, r25	; 8
 20e:	98 b1       	in	r25, 0x08	; 8
 210:	9d 7f       	andi	r25, 0xFD	; 253
 212:	98 b9       	out	0x08, r25	; 8
 214:	98 b1       	in	r25, 0x08	; 8
 216:	94 60       	ori	r25, 0x04	; 4
 218:	98 b9       	out	0x08, r25	; 8
 21a:	ef ef       	ldi	r30, 0xFF	; 255
 21c:	f7 e4       	ldi	r31, 0x47	; 71
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_wr_command+0x26>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_wr_command+0x2c>
 224:	00 00       	nop
 226:	98 b1       	in	r25, 0x08	; 8
 228:	9b 7f       	andi	r25, 0xFB	; 251
 22a:	98 b9       	out	0x08, r25	; 8
 22c:	82 95       	swap	r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	98 b1       	in	r25, 0x08	; 8
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	98 b9       	out	0x08, r25	; 8
 236:	98 b1       	in	r25, 0x08	; 8
 238:	89 2b       	or	r24, r25
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	88 b9       	out	0x08, r24	; 8
 242:	88 b1       	in	r24, 0x08	; 8
 244:	8d 7f       	andi	r24, 0xFD	; 253
 246:	88 b9       	out	0x08, r24	; 8
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	97 e4       	ldi	r25, 0x47	; 71
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_wr_command+0x5a>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_wr_command+0x60>
 258:	00 00       	nop
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	88 b9       	out	0x08, r24	; 8
 260:	08 95       	ret

00000262 <lcd_init>:
 262:	67 df       	rcall	.-306    	; 0x132 <lcd_set_4bit>
 264:	86 e6       	ldi	r24, 0x66	; 102
 266:	9e e0       	ldi	r25, 0x0E	; 14
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x6>
 26c:	00 00       	nop
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	c3 df       	rcall	.-122    	; 0x1f8 <lcd_wr_command>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	c1 df       	rcall	.-126    	; 0x1f8 <lcd_wr_command>
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	bf df       	rcall	.-130    	; 0x1f8 <lcd_wr_command>
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	bd df       	rcall	.-134    	; 0x1f8 <lcd_wr_command>
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	bb cf       	rjmp	.-138    	; 0x1f8 <lcd_wr_command>
 282:	08 95       	ret

00000284 <lcd_home>:
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	b8 cf       	rjmp	.-144    	; 0x1f8 <lcd_wr_command>
 288:	08 95       	ret

0000028a <lcd_cursor>:
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	69 f0       	breq	.+26     	; 0x2a8 <lcd_cursor+0x1e>
 28e:	18 f4       	brcc	.+6      	; 0x296 <lcd_cursor+0xc>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_cursor+0x16>
 294:	08 95       	ret
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	59 f0       	breq	.+22     	; 0x2b0 <lcd_cursor+0x26>
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	69 f0       	breq	.+26     	; 0x2b8 <lcd_cursor+0x2e>
 29e:	08 95       	ret
 2a0:	8f e7       	ldi	r24, 0x7F	; 127
 2a2:	86 0f       	add	r24, r22
 2a4:	a9 cf       	rjmp	.-174    	; 0x1f8 <lcd_wr_command>
 2a6:	08 95       	ret
 2a8:	8f eb       	ldi	r24, 0xBF	; 191
 2aa:	86 0f       	add	r24, r22
 2ac:	a5 cf       	rjmp	.-182    	; 0x1f8 <lcd_wr_command>
 2ae:	08 95       	ret
 2b0:	83 e9       	ldi	r24, 0x93	; 147
 2b2:	86 0f       	add	r24, r22
 2b4:	a1 cf       	rjmp	.-190    	; 0x1f8 <lcd_wr_command>
 2b6:	08 95       	ret
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	86 0f       	add	r24, r22
 2bc:	9d cf       	rjmp	.-198    	; 0x1f8 <lcd_wr_command>
 2be:	08 95       	ret

000002c0 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 2c0:	cf 93       	push	r28
 2c2:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 2c4:	e2 df       	rcall	.-60     	; 0x28a <lcd_cursor>
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
 2c6:	2c 2f       	mov	r18, r28
 2c8:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
 2ca:	98 b1       	in	r25, 0x08	; 8
 2cc:	9f 70       	andi	r25, 0x0F	; 15
 2ce:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	82 2b       	or	r24, r18
 2d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	8d 7f       	andi	r24, 0xFD	; 253
 2e0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	97 e4       	ldi	r25, 0x47	; 71
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_wr_char+0x2c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_wr_char+0x32>
 2f2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	88 b9       	out	0x08, r24	; 8

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
 2fa:	c2 95       	swap	r28
 2fc:	c0 7f       	andi	r28, 0xF0	; 240
	lcd_port &= 0x0F;
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	88 b9       	out	0x08, r24	; 8
	lcd_port |= alpha_num_char;
 304:	88 b1       	in	r24, 0x08	; 8
 306:	c8 2b       	or	r28, r24
 308:	c8 b9       	out	0x08, r28	; 8
	sbit(lcd_port,RS);
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RW);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	8d 7f       	andi	r24, 0xFD	; 253
 314:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);
 316:	88 b1       	in	r24, 0x08	; 8
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	88 b9       	out	0x08, r24	; 8
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	97 e4       	ldi	r25, 0x47	; 71
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <lcd_wr_char+0x60>
 324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_wr_char+0x66>
 326:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	8b 7f       	andi	r24, 0xFB	; 251
 32c:	88 b9       	out	0x08, r24	; 8
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <buzzerBeep>:
}
}
}

void buzzerBeep(){
	PORTC |= (0x08);
 332:	88 b1       	in	r24, 0x08	; 8
 334:	88 60       	ori	r24, 0x08	; 8
 336:	88 b9       	out	0x08, r24	; 8
 338:	2f e3       	ldi	r18, 0x3F	; 63
 33a:	8d e0       	ldi	r24, 0x0D	; 13
 33c:	93 e0       	ldi	r25, 0x03	; 3
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <buzzerBeep+0xc>
 346:	00 c0       	rjmp	.+0      	; 0x348 <buzzerBeep+0x16>
 348:	00 00       	nop
	_delay_ms(1000);
	PORTC &= (0x00);
 34a:	88 b1       	in	r24, 0x08	; 8
 34c:	18 b8       	out	0x08, r1	; 8
 34e:	2f e3       	ldi	r18, 0x3F	; 63
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	93 e0       	ldi	r25, 0x03	; 3
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <buzzerBeep+0x22>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <buzzerBeep+0x2c>
 35e:	00 00       	nop
 360:	08 95       	ret

00000362 <lcdPrint>:
	_delay_ms(1000);
}

void lcdPrint(int row,int coloumn,int startPosi){
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	e2 97       	sbiw	r28, 0x32	; 50
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	d8 2e       	mov	r13, r24
 382:	7b 01       	movw	r14, r22
	char description[50]=" PRASANG AGARWAL 19010201 ECE ";
 384:	8f e1       	ldi	r24, 0x1F	; 31
 386:	e0 e0       	ldi	r30, 0x00	; 0
 388:	f2 e0       	ldi	r31, 0x02	; 2
 38a:	de 01       	movw	r26, r28
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	8a 95       	dec	r24
 394:	e1 f7       	brne	.-8      	; 0x38e <lcdPrint+0x2c>
 396:	fe 01       	movw	r30, r28
 398:	b0 96       	adiw	r30, 0x20	; 32
 39a:	83 e1       	ldi	r24, 0x13	; 19
 39c:	df 01       	movw	r26, r30
 39e:	1d 92       	st	X+, r1
 3a0:	8a 95       	dec	r24
 3a2:	e9 f7       	brne	.-6      	; 0x39e <lcdPrint+0x3c>
	int i=startPosi+1;
 3a4:	8a 01       	movw	r16, r20
 3a6:	0f 5f       	subi	r16, 0xFF	; 255
 3a8:	1f 4f       	sbci	r17, 0xFF	; 255
	while(description[i]!=' '){
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <lcdPrint+0x5a>
		lcd_wr_char(row,coloumn,description[i]);
 3ac:	6e 2d       	mov	r22, r14
 3ae:	8d 2d       	mov	r24, r13
 3b0:	87 df       	rcall	.-242    	; 0x2c0 <lcd_wr_char>
		coloumn++;
 3b2:	bf ef       	ldi	r27, 0xFF	; 255
 3b4:	eb 1a       	sub	r14, r27
 3b6:	fb 0a       	sbc	r15, r27
		i++;
 3b8:	0f 5f       	subi	r16, 0xFF	; 255
 3ba:	1f 4f       	sbci	r17, 0xFF	; 255
}

void lcdPrint(int row,int coloumn,int startPosi){
	char description[50]=" PRASANG AGARWAL 19010201 ECE ";
	int i=startPosi+1;
	while(description[i]!=' '){
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	ec 0f       	add	r30, r28
 3c2:	fd 1f       	adc	r31, r29
 3c4:	e0 0f       	add	r30, r16
 3c6:	f1 1f       	adc	r31, r17
 3c8:	40 81       	ld	r20, Z
 3ca:	40 32       	cpi	r20, 0x20	; 32
 3cc:	79 f7       	brne	.-34     	; 0x3ac <lcdPrint+0x4a>
		lcd_wr_char(row,coloumn,description[i]);
		coloumn++;
		i++;
	}
 3ce:	e2 96       	adiw	r28, 0x32	; 50
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	08 95       	ret

000003ea <main>:
void lcdPrint(int,int,int);
int noOfOne(int);

int main(void)
{
	DDRJ=0xFF;						//Define all led's as output
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	PORTJ=0x00;						//Define all led's as low in the beginning
 3f0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
	DDRC=0x08;						//Define 3rd pin of port C as output
 3f4:	88 e0       	ldi	r24, 0x08	; 8
 3f6:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;						//Define all pins as low in the beginning of port C
 3f8:	18 b8       	out	0x08, r1	; 8
	int ledGraph=0x01;
	int one=0;
	int wordCounter=1;
	lcd_port_config();
 3fa:	94 de       	rcall	.-728    	; 0x124 <lcd_port_config>
	lcd_init();
 3fc:	32 df       	rcall	.-412    	; 0x262 <lcd_init>
	lcd_home();
 3fe:	42 df       	rcall	.-380    	; 0x284 <lcd_home>
 400:	cc 24       	eor	r12, r12
	PORTJ=0x00;						//Define all led's as low in the beginning
	DDRC=0x08;						//Define 3rd pin of port C as output
	PORTC=0x00;						//Define all pins as low in the beginning of port C
	int ledGraph=0x01;
	int one=0;
	int wordCounter=1;
 402:	c3 94       	inc	r12
 404:	d1 2c       	mov	r13, r1
 406:	00 e0       	ldi	r16, 0x00	; 0
	DDRJ=0xFF;						//Define all led's as output
	PORTJ=0x00;						//Define all led's as low in the beginning
	DDRC=0x08;						//Define 3rd pin of port C as output
	PORTC=0x00;						//Define all pins as low in the beginning of port C
	int ledGraph=0x01;
	int one=0;
 408:	10 e0       	ldi	r17, 0x00	; 0
 40a:	ee 24       	eor	r14, r14
{
	DDRJ=0xFF;						//Define all led's as output
	PORTJ=0x00;						//Define all led's as low in the beginning
	DDRC=0x08;						//Define 3rd pin of port C as output
	PORTC=0x00;						//Define all pins as low in the beginning of port C
	int ledGraph=0x01;
 40c:	e3 94       	inc	r14
 40e:	f1 2c       	mov	r15, r1
 410:	57 c0       	rjmp	.+174    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 412:	e5 e0       	ldi	r30, 0x05	; 5
	lcd_home();
	
while(1){
while (ledGraph!=(0xFF))
{
	PORTJ |= ledGraph;
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	80 81       	ld	r24, Z
 418:	8e 29       	or	r24, r14
 41a:	80 83       	st	Z, r24
 41c:	0f 5f       	subi	r16, 0xFF	; 255
	one++;
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i=0;i<one;i++){
 422:	d0 e0       	ldi	r29, 0x00	; 0
 424:	0b c0       	rjmp	.+22     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		buzzerBeep();
 426:	85 df       	rcall	.-246    	; 0x332 <buzzerBeep>
 428:	2f e7       	ldi	r18, 0x7F	; 127
 42a:	8a e1       	ldi	r24, 0x1A	; 26
 42c:	96 e0       	ldi	r25, 0x06	; 6
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	21 96       	adiw	r28, 0x01	; 1
while(1){
while (ledGraph!=(0xFF))
{
	PORTJ |= ledGraph;
	one++;
	for(int i=0;i<one;i++){
 43c:	c0 17       	cp	r28, r16
 43e:	d1 07       	cpc	r29, r17
 440:	94 f3       	brlt	.-28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 442:	ee 0c       	add	r14, r14
		buzzerBeep();
		_delay_ms(2000);
	}
	ledGraph = ledGraph << 1;
 444:	ff 1c       	adc	r15, r15
 446:	68 94       	set
	ledGraph |= 0x01;
 448:	e0 f8       	bld	r14, 0
 44a:	21 e0       	ldi	r18, 0x01	; 1
	if(wordCounter==1){
 44c:	c2 16       	cp	r12, r18
 44e:	d1 04       	cpc	r13, r1
 450:	41 f4       	brne	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 452:	40 e0       	ldi	r20, 0x00	; 0
		lcdPrint(1,1,0);
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	81 df       	rcall	.-254    	; 0x362 <lcdPrint>
 460:	23 c0       	rjmp	.+70     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 462:	82 e0       	ldi	r24, 0x02	; 2
	}
	else if(wordCounter==2){
 464:	c8 16       	cp	r12, r24
 466:	d1 04       	cpc	r13, r1
 468:	41 f4       	brne	.+16     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 46a:	48 e0       	ldi	r20, 0x08	; 8
		lcdPrint(1,9,8);
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	69 e0       	ldi	r22, 0x09	; 9
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	75 df       	rcall	.-278    	; 0x362 <lcdPrint>
 478:	17 c0       	rjmp	.+46     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 47a:	93 e0       	ldi	r25, 0x03	; 3
		}else if(wordCounter==3){
 47c:	c9 16       	cp	r12, r25
 47e:	d1 04       	cpc	r13, r1
 480:	41 f4       	brne	.+16     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 482:	40 e1       	ldi	r20, 0x10	; 16
		lcdPrint(2,1,16);
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	69 df       	rcall	.-302    	; 0x362 <lcdPrint>
 490:	0b c0       	rjmp	.+22     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 492:	24 e0       	ldi	r18, 0x04	; 4
		}else if(wordCounter==4){
 494:	c2 16       	cp	r12, r18
 496:	d1 04       	cpc	r13, r1
 498:	39 f4       	brne	.+14     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		lcdPrint(2,10,25);
 49a:	49 e1       	ldi	r20, 0x19	; 25
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	6a e0       	ldi	r22, 0x0A	; 10
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	5d df       	rcall	.-326    	; 0x362 <lcdPrint>
 4a8:	8f e7       	ldi	r24, 0x7F	; 127
 4aa:	9a e1       	ldi	r25, 0x1A	; 26
 4ac:	26 e0       	ldi	r18, 0x06	; 6
 4ae:	81 50       	subi	r24, 0x01	; 1
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	20 40       	sbci	r18, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
	}
	_delay_ms(2000);
	wordCounter++;
 4bc:	c8 1a       	sub	r12, r24
 4be:	d8 0a       	sbc	r13, r24
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
	lcd_port_config();
	lcd_init();
	lcd_home();
	
while(1){
while (ledGraph!=(0xFF))
 4c2:	e9 16       	cp	r14, r25
 4c4:	f1 04       	cpc	r15, r1
 4c6:	e1 f3       	breq	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c8:	a4 cf       	rjmp	.-184    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
